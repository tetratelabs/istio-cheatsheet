'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

let blockJsRequests = (() => {
  var _ref = _asyncToGenerator(function* (page) {
    yield page.setRequestInterceptionEnabled(true);
    page.on('request', function (interceptedRequest) {
      if (interceptedRequest.url.endsWith('.js')) {
        interceptedRequest.abort();
      } else {
        interceptedRequest.continue();
      }
    });
  });

  return function blockJsRequests(_x) {
    return _ref.apply(this, arguments);
  };
})();

let pruneNonCriticalCssLauncher = (() => {
  var _ref2 = _asyncToGenerator(function* ({
    url,
    astRules,
    width,
    height,
    forceInclude,
    userAgent,
    timeout,
    renderWaitTime,
    blockJSRequests,
    customPageHeaders = {},
    debuglog
  }) {
    debuglog('Penthouse core start');

    // launch browser - todo - consider reusing instances
    const browser = yield _puppeteer2.default.launch({
      ignoreHTTPSErrors: true,
      args: ['--disable-setuid-sandbox', '--no-sandbox']
    });
    debuglog('browser launched');

    const page = yield browser.newPage();
    debuglog('new page opened in browser');

    yield page.setViewport({ width, height });
    debuglog('viewport set');

    if (blockJSRequests) {
      yield blockJsRequests(page);
      debuglog('blocking js requests');
    }
    page.on('console', function (msg) {
      // pass through log messages
      // - the ones sent by penthouse for debugging has 'debug: ' prefix.
      if (/^debug: /.test(msg)) {
        debuglog(msg.replace(/^debug: /, ''));
      }
    });

    yield page.goto(url, {
      timeout
    });
    debuglog('page loaded');

    const criticalRules = yield page.evaluate(_pruneNonCriticalCss2.default, {
      astRules,
      forceInclude,
      renderWaitTime
    });

    debuglog('GENERATION_DONE');

    // cleanup
    browser.close();

    return criticalRules;
  });

  return function pruneNonCriticalCssLauncher(_x2) {
    return _ref2.apply(this, arguments);
  };
})();

var _puppeteer = require('puppeteer');

var _puppeteer2 = _interopRequireDefault(_puppeteer);

var _pruneNonCriticalCss = require('./browser-sandbox/pruneNonCriticalCss');

var _pruneNonCriticalCss2 = _interopRequireDefault(_pruneNonCriticalCss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = pruneNonCriticalCssLauncher;